Ok(SyntaxTree { program: [DeclassAssign(DeclassAssignment { typ: Boolean, name: "a", assign: Some(Expr(Factor(ConstBool(true)))) }), FunctionDefinition(FunctionDefinition { func_type: Float, func_name: "test", func_param: [Parameter { typ: Integer, name: "x" }, Parameter { typ: Integer, name: "y" }], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(IfStatement { assign: Expr(Factor(Id("a"))), if_block: StatementList(StatementList { stmt_list: [Statement(ReturnStatement(Some(Expr(Factor(ConstInt(1))))))] }), else_block: None }), Statement(IfStatement { assign: Expr(Eq { lhs: Factor(Id("a")), rhs: Factor(ConstBool(true)) }), if_block: StatementList(StatementList { stmt_list: [Statement(ReturnStatement(Some(Expr(Factor(ConstInt(2))))))] }), else_block: Some(StatementList(StatementList { stmt_list: [Statement(ReturnStatement(Some(Expr(Factor(ConstInt(3))))))] })) }), Statement(ForStatement { assign: DeclassAssignment(DeclassAssignment { typ: Integer, name: "i", assign: Some(Expr(Factor(ConstInt(0)))) }), expression: Lst { lhs: Factor(Id("i")), rhs: Factor(ConstInt(5)) }, statassign: StatAssignment { name: "i", assign: Expr(Add { lhs: Factor(Id("i")), rhs: Factor(ConstInt(1)) }) }, block: StatementList(StatementList { stmt_list: [Statement(StatAssignment(StatAssignment { name: "x", assign: Expr(Add { lhs: Factor(Id("x")), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "j", assign: Some(Expr(Factor(ConstInt(0)))) })), Statement(ForStatement { assign: StatAssignment(StatAssignment { name: "j", assign: Expr(Factor(ConstInt(0))) }), expression: Lst { lhs: Factor(Id("j")), rhs: Factor(ConstInt(7)) }, statassign: StatAssignment { name: "j", assign: Expr(Add { lhs: Factor(Id("j")), rhs: Factor(ConstInt(1)) }) }, block: StatementList(StatementList { stmt_list: [Statement(StatAssignment(StatAssignment { name: "x", assign: Expr(Mul { lhs: Factor(Id("x")), rhs: ConstInt(2) }) }))] }) }), Statement(WhileStatement { assign: Expr(Lst { lhs: Factor(Id("j")), rhs: Factor(ConstInt(10)) }), block: StatementList(StatementList { stmt_list: [Statement(StatAssignment(StatAssignment { name: "x", assign: Expr(Sub { lhs: Factor(Id("x")), rhs: Factor(ConstInt(1)) }) })), Statement(StatAssignment(StatAssignment { name: "j", assign: Expr(Add { lhs: Factor(Id("j")), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(DoWhileStatement { assign: Expr(Lst { lhs: Factor(Id("j")), rhs: Factor(ConstInt(20)) }), block: StatementList(StatementList { stmt_list: [Statement(StatAssignment(StatAssignment { name: "x", assign: Expr(Div { lhs: Factor(Id("x")), rhs: ConstInt(2) }) })), Statement(StatAssignment(StatAssignment { name: "j", assign: Expr(Add { lhs: Factor(Id("j")), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(EmptyStatement), Statement(ReturnStatement(Some(Expr(Factor(Id("x"))))))] } } }), FunctionDefinition(FunctionDefinition { func_type: Void, func_name: "main", func_param: [], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "a", assign: Some(Expr(Factor(ConstInt(1)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "b", assign: Some(Expr(Factor(ConstInt(2)))) })), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCall { func_name: "test", func_assigns: [Expr(Factor(Id("a"))), Expr(Factor(Id("b")))] }))))))] } } })] })
