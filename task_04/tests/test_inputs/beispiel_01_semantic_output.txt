SyntaxTreeRefactored { main_func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(1))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(2))))))), Statement(IfStatement { assign: Expr(Leq { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(1)) }), if_block: Statement(Printf(PrintAssign(Expr(Add { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(1)) })))), else_block: None }), Statement(IfStatement { assign: Expr(Geq { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(1)) }), if_block: Statement(Printf(PrintAssign(Expr(Sub { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(1)) })))), else_block: None }), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(23))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(17))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(42))))))), Statement(DeclassAssignment(Local(Some(Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: Assignment(Expr(Add { lhs: Factor(IdLocalVar(1)), rhs: Factor(IdLocalVar(2)) })) }))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(3)) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(1)))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(2))))))] } } })))))), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(1))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(2))))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(23))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(17))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(42))))))), Statement(DeclassAssignment(Local(Some(Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: Assignment(Expr(Add { lhs: Factor(IdLocalVar(1)), rhs: Factor(IdLocalVar(2)) })) }))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(3)) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(1)))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(2))))))] } } })) }), if_block: StatementList(StatementListRefactored { stmt_list: [Statement(IfStatement { assign: Expr(Grt { lhs: Factor(IdLocalVar(1)), rhs: Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(23))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(17))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(42))))))), Statement(DeclassAssignment(Local(Some(Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: Assignment(Expr(Add { lhs: Factor(IdLocalVar(1)), rhs: Factor(IdLocalVar(2)) })) }))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(3)) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(1)))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(2))))))] } } })) }), if_block: StatementList(StatementListRefactored { stmt_list: [Statement(Printf(PrintAssign(Expr(Add { lhs: Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(23))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(17))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(42))))))), Statement(DeclassAssignment(Local(Some(Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: Assignment(Expr(Add { lhs: Factor(IdLocalVar(1)), rhs: Factor(IdLocalVar(2)) })) }))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(3)) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(1)))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(2))))))] } } })), rhs: Factor(FunctionCall(FunctionCallRefactored { func_assigns: [], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(23))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(17))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(42))))))), Statement(DeclassAssignment(Local(Some(Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: Assignment(Expr(Add { lhs: Factor(IdLocalVar(1)), rhs: Factor(IdLocalVar(2)) })) }))))), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(0)), rhs: Factor(IdLocalVar(3)) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(1)))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(IdLocalVar(2))))))] } } })) }))))] }), else_block: None })] }), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(ConstFloat(3.14159))))))] } } }))))))] } }, global_var_list: [] }
