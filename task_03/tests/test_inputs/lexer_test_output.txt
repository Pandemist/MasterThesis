KwBoolean: "bool"
Id("not"): "not"
LParen: "("
KwBoolean: "bool"
Id("b"): "b"
RParen: ")"
LBrace: "{"
KwIf: "if"
LParen: "("
Id("b"): "b"
Eq: "=="
ConstBoolean(true): "true"
RParen: ")"
KwReturn: "return"
ConstBoolean(false): "false"
Semicolon: ";"
KwElse: "else"
KwReturn: "return"
ConstBoolean(true): "true"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id("morgan11"): "morgan11"
LParen: "("
KwBoolean: "bool"
Id("a"): "a"
Comma: ","
KwBoolean: "bool"
Id("b"): "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id("not"): "not"
LParen: "("
Id("a"): "a"
Or: "||"
Id("b"): "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id("morgan12"): "morgan12"
LParen: "("
KwBoolean: "bool"
Id("a"): "a"
Comma: ","
KwBoolean: "bool"
Id("b"): "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id("not"): "not"
LParen: "("
Id("a"): "a"
RParen: ")"
And: "&&"
Id("not"): "not"
LParen: "("
Id("b"): "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id("morgan21"): "morgan21"
LParen: "("
KwBoolean: "bool"
Id("a"): "a"
Comma: ","
KwBoolean: "bool"
Id("b"): "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id("not"): "not"
LParen: "("
Id("a"): "a"
And: "&&"
Id("b"): "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwBoolean: "bool"
Id("morgan22"): "morgan22"
LParen: "("
KwBoolean: "bool"
Id("a"): "a"
Comma: ","
KwBoolean: "bool"
Id("b"): "b"
RParen: ")"
LBrace: "{"
KwReturn: "return"
Id("not"): "not"
LParen: "("
Id("a"): "a"
RParen: ")"
Or: "||"
Id("not"): "not"
LParen: "("
Id("b"): "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwFloat: "float"
Id("dummyFloat"): "dummyFloat"
LParen: "("
KwFloat: "float"
Id("a"): "a"
RParen: ")"
LBrace: "{"
KwFloat: "float"
Id("b"): "b"
Assign: "="
ConstFloat(1.0): "1.0"
Semicolon: ";"
KwFloat: "float"
Id("c"): "c"
Assign: "="
ConstFloat(0.5): ".5"
Semicolon: ";"
KwFloat: "float"
Id("d"): "d"
Assign: "="
ConstFloat(10000000000.0): "1e10"
Semicolon: ";"
KwReturn: "return"
Id("a"): "a"
Asterisk: "*"
ConstFloat(1.2): "1.2"
Semicolon: ";"
RBrace: "}"
KwVoid: "void"
Id("main"): "main"
LParen: "("
RParen: ")"
LBrace: "{"
KwBoolean: "bool"
Id("a"): "a"
Assign: "="
ConstBoolean(true): "true"
Semicolon: ";"
KwBoolean: "bool"
Id("b"): "b"
Assign: "="
ConstBoolean(true): "true"
Semicolon: ";"
KwInt: "int"
Id("i"): "i"
Assign: "="
ConstInt(0): "0"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
ConstString("\"Testing deMorgans Law\""): "\"Testing deMorgans Law\""
RParen: ")"
Semicolon: ";"
KwDo: "do"
LBrace: "{"
KwDo: "do"
LBrace: "{"
KwPrintf: "printf"
LParen: "("
Id("i"): "i"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id("morgan11"): "morgan11"
LParen: "("
Id("a"): "a"
Comma: ","
Id("b"): "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id("morgan12"): "morgan12"
LParen: "("
Id("a"): "a"
Comma: ","
Id("b"): "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id("morgan21"): "morgan21"
LParen: "("
Id("a"): "a"
Comma: ","
Id("b"): "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
KwPrintf: "printf"
LParen: "("
Id("morgan22"): "morgan22"
LParen: "("
Id("a"): "a"
Comma: ","
Id("b"): "b"
RParen: ")"
RParen: ")"
Semicolon: ";"
Id("i"): "i"
Assign: "="
Id("i"): "i"
Plus: "+"
ConstInt(1): "1"
Semicolon: ";"
Id("b"): "b"
Assign: "="
Id("not"): "not"
LParen: "("
Id("b"): "b"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwWhile: "while"
LParen: "("
Id("b"): "b"
Neq: "!="
ConstBoolean(true): "true"
RParen: ")"
Semicolon: ";"
Id("a"): "a"
Assign: "="
Id("not"): "not"
LParen: "("
Id("a"): "a"
RParen: ")"
Semicolon: ";"
RBrace: "}"
KwWhile: "while"
LParen: "("
Id("a"): "a"
Neq: "!="
ConstBoolean(true): "true"
RParen: ")"
Semicolon: ";"
RBrace: "}"
