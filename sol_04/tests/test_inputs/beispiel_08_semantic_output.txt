SyntaxTreeRefactored { main_func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(1))))))), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(2))))))), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCallRefactored { func_assigns: [Expr(Factor(IdLocalVar(0))), Expr(Factor(IdLocalVar(1)))], func_ref: FunctionBodyRefactored { body: StatementListRefactored { stmt_list: [Statement(IfStatement { assign: Expr(Factor(IdGlobalVar(0))), if_block: StatementList(StatementListRefactored { stmt_list: [Statement(ReturnStatement(Some(IntToFloat(Expr(Factor(ConstInt(1)))))))] }), else_block: None }), Statement(IfStatement { assign: Expr(Eq { lhs: Factor(IdGlobalVar(0)), rhs: Factor(ConstBool(true)) }), if_block: StatementList(StatementListRefactored { stmt_list: [Statement(ReturnStatement(Some(IntToFloat(Expr(Factor(ConstInt(2)))))))] }), else_block: Some(StatementList(StatementListRefactored { stmt_list: [Statement(ReturnStatement(Some(IntToFloat(Expr(Factor(ConstInt(3)))))))] })) }), Statement(ForStatement { assign: DeclassAssignment(Local(Some(Expr(Factor(ConstInt(0)))))), expression: Lst { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(5)) }, statassign: Local { stack_pos: 2, assign: Expr(Add { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(1)) }) }, block: StatementList(StatementListRefactored { stmt_list: [Statement(StatAssignment(Local { stack_pos: 0, assign: Expr(Add { lhs: Factor(IdLocalVar(0)), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(DeclassAssignment(Local(Some(Expr(Factor(ConstInt(0))))))), Statement(ForStatement { assign: StatAssignment(Local { stack_pos: 2, assign: Expr(Factor(ConstInt(0))) }), expression: Lst { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(7)) }, statassign: Local { stack_pos: 2, assign: Expr(Add { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(1)) }) }, block: StatementList(StatementListRefactored { stmt_list: [Statement(StatAssignment(Local { stack_pos: 0, assign: Expr(Mul { lhs: Factor(IdLocalVar(0)), rhs: ConstInt(2) }) }))] }) }), Statement(WhileStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(10)) }), block: StatementList(StatementListRefactored { stmt_list: [Statement(StatAssignment(Local { stack_pos: 0, assign: Expr(Sub { lhs: Factor(IdLocalVar(0)), rhs: Factor(ConstInt(1)) }) })), Statement(StatAssignment(Local { stack_pos: 2, assign: Expr(Add { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(DoWhileStatement { assign: Expr(Lst { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(20)) }), block: StatementList(StatementListRefactored { stmt_list: [Statement(StatAssignment(Local { stack_pos: 0, assign: Expr(Div { lhs: Factor(IdLocalVar(0)), rhs: ConstInt(2) }) })), Statement(StatAssignment(Local { stack_pos: 2, assign: Expr(Add { lhs: Factor(IdLocalVar(2)), rhs: Factor(ConstInt(1)) }) }))] }) }), Statement(EmptyStatement), Statement(ReturnStatement(Some(IntToFloat(Expr(Factor(IdLocalVar(0)))))))] } } }))))))] } }, global_var_list: [Global(Some(Expr(Factor(ConstBool(true)))))] }
