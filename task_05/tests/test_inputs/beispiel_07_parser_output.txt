Ok(SyntaxTree { program: [DeclassAssign(DeclassAssignment { typ: Boolean, name: "a", assign: Some(Expr(Factor(ConstBool(true)))) }), FunctionDefinition(FunctionDefinition { func_type: Float, func_name: "test", func_param: [Parameter { typ: Integer, name: "x" }, Parameter { typ: Integer, name: "y" }], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(StatAssignment(StatAssignment { name: "a", assign: Expr(Factor(Assignment(Expr(Lst { lhs: Factor(Id("x")), rhs: Factor(Id("y")) })))) })), Statement(StatAssignment(StatAssignment { name: "a", assign: Expr(Factor(Assignment(Expr(Grt { lhs: Factor(Id("x")), rhs: Factor(Id("y")) })))) })), Statement(StatAssignment(StatAssignment { name: "a", assign: Expr(Factor(Assignment(Expr(Eq { lhs: Factor(Id("x")), rhs: Factor(Id("y")) })))) })), Statement(ReturnStatement(Some(Expr(Add { lhs: Factor(Id("x")), rhs: Factor(Id("y")) }))))] } } }), FunctionDefinition(FunctionDefinition { func_type: Void, func_name: "main", func_param: [], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "a", assign: Some(Expr(Factor(ConstInt(1)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "b", assign: Some(Expr(Factor(ConstInt(2)))) })), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCall { func_name: "test", func_assigns: [Expr(Factor(Id("a"))), Expr(Factor(Id("b")))] }))))))] } } })] })
