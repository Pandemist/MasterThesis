Ok(SyntaxTree { program: [FunctionDefinition(FunctionDefinition { func_type: Integer, func_name: "blub", func_param: [], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "blub1", assign: Some(Expr(Factor(ConstInt(23)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "blub2", assign: Some(Expr(Factor(ConstInt(17)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "blub3", assign: Some(Expr(Factor(ConstInt(42)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "blub4", assign: Some(Expr(Mul { lhs: Factor(Id("blub1")), rhs: Assignment(Expr(Add { lhs: Factor(Id("blub2")), rhs: Factor(Id("blub3")) })) })) })), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(Id("blub1")), rhs: Factor(Id("blub4")) }), if_block: Statement(ReturnStatement(Some(Expr(Factor(Id("blub2")))))), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(Id("blub3"))))))] } } }), FunctionDefinition(FunctionDefinition { func_type: Float, func_name: "blah", func_param: [], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "a", assign: Some(Expr(Factor(ConstInt(1)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "b", assign: Some(Expr(Factor(ConstInt(2)))) })), Statement(IfStatement { assign: Expr(Lst { lhs: Factor(Id("a")), rhs: Factor(FunctionCall(FunctionCall { func_name: "blub", func_assigns: [] })) }), if_block: StatementList(StatementList { stmt_list: [Statement(IfStatement { assign: Expr(Grt { lhs: Factor(Id("b")), rhs: Factor(FunctionCall(FunctionCall { func_name: "blub", func_assigns: [] })) }), if_block: StatementList(StatementList { stmt_list: [Statement(Printf(PrintAssign(Expr(Add { lhs: Factor(FunctionCall(FunctionCall { func_name: "blub", func_assigns: [] })), rhs: Factor(FunctionCall(FunctionCall { func_name: "blub", func_assigns: [] })) }))))] }), else_block: None })] }), else_block: None }), Statement(ReturnStatement(Some(Expr(Factor(ConstFloat(3.14159))))))] } } }), FunctionDefinition(FunctionDefinition { func_type: Void, func_name: "main", func_param: [], func_body: FunctionBody { body: StatementList { stmt_list: [Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "a", assign: Some(Expr(Factor(ConstInt(1)))) })), Statement(DeclassAssignment(DeclassAssignment { typ: Integer, name: "b", assign: Some(Expr(Factor(ConstInt(2)))) })), Statement(IfStatement { assign: Expr(Leq { lhs: Factor(Id("a")), rhs: Factor(Id("b")) }), if_block: Statement(Printf(PrintAssign(Expr(Add { lhs: Factor(Id("a")), rhs: Factor(Id("b")) })))), else_block: None }), Statement(IfStatement { assign: Expr(Geq { lhs: Factor(Id("a")), rhs: Factor(Id("b")) }), if_block: Statement(Printf(PrintAssign(Expr(Sub { lhs: Factor(Id("a")), rhs: Factor(Id("b")) })))), else_block: None }), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCall { func_name: "blub", func_assigns: [] })))))), Statement(Printf(PrintAssign(Expr(Factor(FunctionCall(FunctionCall { func_name: "blah", func_assigns: [] }))))))] } } })] })
